---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
spec:
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
        name: kubeslice-demo
    spec:
      serviceAccountName: default
      containers:
        - name: server-checkoutservice
          image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.4.1
          ports:
          - containerPort: 5050
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:5050"]
          env:
          - name: PORT
            value: "5050"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalog-service.boutique.svc.slice.local:3550"
          - name: SHIPPING_SERVICE_ADDR
            value: "shipping-service.boutique.svc.slice.local:50051"
          - name: PAYMENT_SERVICE_ADDR
            value: "payment-service.boutique.svc.slice.local:50051"
          - name: EMAIL_SERVICE_ADDR
            value: "email-service.boutique.svc.slice.local:5000"
          - name: CURRENCY_SERVICE_ADDR
            value: "currency-service.boutique.svc.slice.local:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: DISABLE_STATS
            value: "1"
          - name: DISABLE_TRACING
            value: "1"
          - name: DISABLE_PROFILER
            value: "1"
          # - name: JAEGER_SERVICE_ADDR
          #   value: "jaeger-collector:14268"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 100m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
spec:
  type: ClusterIP
  selector:
    app: checkoutservice
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        name: kubeslice-demo
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: default
      containers:
        - name: server-frontend
          image: gcr.io/google-samples/microservices-demo/frontend:v0.4.1
          ports:
          - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-readiness-probe"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-liveness-probe"
          env:
          - name: PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalog-service.boutique.svc.slice.local:3550"
          - name: CURRENCY_SERVICE_ADDR
            value: "currency-service.boutique.svc.slice.local:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: RECOMMENDATION_SERVICE_ADDR
            value: "recommendation-service.boutique.svc.slice.local:8080"
          - name: SHIPPING_SERVICE_ADDR
            value: "shipping-service.boutique.svc.slice.local:50051"
          - name: CHECKOUT_SERVICE_ADDR
            value: "checkoutservice:5050"
          - name: AD_SERVICE_ADDR
            value: "ad-service.boutique.svc.slice.local:9555"
          # # ENV_PLATFORM: One of: local, gcp, aws, azure, onprem, alibaba
          # # When not set, defaults to "local" unless running in GKE, otherwies auto-sets to gcp 
          # - name: ENV_PLATFORM 
          #   value: "aws"
          - name: DISABLE_TRACING
            value: "1"
          - name: DISABLE_PROFILER
            value: "1"
          # - name: JAEGER_SERVICE_ADDR
          #   value: "jaeger-collector:14268"
          # - name: CYMBAL_BRANDING
          #   value: "true"
          resources:
            requests:
              cpu: 500m
              memory: 256Mi
            limits:
              cpu: 600m
              memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-external
  # annotations:
  #   external-dns.alpha.kubernetes.io/hostname: boutique-1.kubeslice.com
  #   external-dns.alpha.kubernetes.io/ttl: "60" #optional
spec:
  type: LoadBalancer
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
#---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: loadgenerator
# spec:
#   selector:
#     matchLabels:
#       app: loadgenerator
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: loadgenerator
#       annotations:
#         sidecar.istio.io/rewriteAppHTTPProbers: "true"
#     spec:
#       serviceAccountName: default
#       terminationGracePeriodSeconds: 5
#       restartPolicy: Always
#       initContainers:
#       - command:
#         - /bin/sh
#         - -exc
#         - |
#           echo "Init container pinging frontend: ${FRONTEND_ADDR}..."
#           STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print $2}')
#           if test $STATUSCODE -ne 200; then
#               echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
#               exit 1
#           fi
#         name: frontend-check
#         image: busybox:latest
#         env:
#         - name: FRONTEND_ADDR
#           value: "frontend:80"
#       containers:
#       - name: main
#         image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.4.1
#         env:
#         - name: FRONTEND_ADDR
#           value: "frontend:80"
#         - name: USERS
#           value: "10"
#         resources:
#           requests:
#             cpu: 300m
#             memory: 256Mi
#           limits:
#             cpu: 500m
#             memory: 512Mi
# ---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis.conf: |-
    appendonly yes
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
spec:
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
        name: kubeslice-demo
    spec:
      containers:
        - name: redis
          image: redis:alpine
          command:
            - redis-server
          args:
            - /usr/local/etc/redis/redis.conf
          ports:
            - containerPort: 6379
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: 6379
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: 6379
          volumeMounts:
            - mountPath: /data
              name: redis-data
            - name: redis-config
              mountPath: /usr/local/etc/redis
          resources:
            limits:
              memory: 256Mi
              cpu: 70m
            requests:
              cpu: 70m
              memory: 200Mi
      volumes:
        - name: redis-data
          #emptyDir: {}
          persistentVolumeClaim:
            claimName: redis-data-pvc
        - name: redis-config
          configMap:
            name: redis-config
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
spec:
  type: ClusterIP
  selector:
    app: redis-cart
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
spec:
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
        name: kubeslice-demo
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
      - name: server-cartservice
        image: gcr.io/google-samples/microservices-demo/cartservice:v0.4.1
        ports:
        - containerPort: 7070
        env:
        - name: REDIS_ADDR
          value: "redis-cart:6379"
        resources:
          requests:
            cpu: 200m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        readinessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070", "-rpc-timeout=5s"]
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070